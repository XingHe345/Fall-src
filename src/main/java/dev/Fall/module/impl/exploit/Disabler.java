package dev.Fall.module.impl.exploit;

import dev.Fall.event.impl.game.TickEvent;
import dev.Fall.event.impl.network.PacketReceiveEvent;
import dev.Fall.event.impl.network.PacketSendEvent;
import dev.Fall.event.impl.player.MotionEvent;
import dev.Fall.module.Category;
import dev.Fall.module.Module;
import dev.Fall.module.settings.impl.BooleanSetting;
import dev.Fall.module.settings.impl.MultipleBoolSetting;
import dev.Fall.utils.time.TimerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;

import java.util.concurrent.CopyOnWriteArrayList;

public class Disabler extends Module {
    public final MultipleBoolSetting bypass = new MultipleBoolSetting("Disabler",
            new BooleanSetting("Basic",  false),
            new BooleanSetting("Post",  false)
    );
    private final CopyOnWriteArrayList<Packet<?>> packetsQueue = new CopyOnWriteArrayList<>();
    public final BooleanSetting cancelc0f = new BooleanSetting("Cancel Transaction (C0f)", false);
    public final BooleanSetting cancelkeepalive = new BooleanSetting("Cancel KeepAlive (C00)", false);
    public final BooleanSetting cancelserverkeepalive = new BooleanSetting("Cancel KeepAlive (S00)", false);
    private TimerUtil timer = new TimerUtil();
    int offGroundTicks = 0;



    public Disabler() {
        super("Disabler", Category.EXPLOIT, "disable anti-cheat some check");
        //watchdogcheckmode.addParent(bypass, bypass -> bypass.getSetting("Watchdog").isEnabled());
        cancelc0f.addParent(bypass, bypass -> bypass.getSetting("Basic").isEnabled());
        cancelkeepalive.addParent(bypass, bypass -> bypass.getSetting("Basic").isEnabled());
        cancelserverkeepalive.addParent(bypass, bypass -> bypass.getSetting("Basic").isEnabled());
        addSettings(bypass, cancelc0f, cancelkeepalive, cancelserverkeepalive);
    }

    @Override
    public void onPacketSendEvent(PacketSendEvent event) {
        if(bypass.isEnabled("Basic")) {
            if(cancelc0f.isEnabled() && event.getPacket() instanceof C0FPacketConfirmTransaction) event.cancel();
            if(cancelkeepalive.isEnabled() && event.getPacket() instanceof C00PacketKeepAlive) event.cancel();
        }
        if (bypass.isEnabled("Post")){

        }
    }


    @Override
    public void onTickEvent(TickEvent event) {
        if(mc.thePlayer == null) return;

        if(!mc.thePlayer.onGround) offGroundTicks ++;
        else offGroundTicks = 0;
    }

    @Override
    public void onPacketReceiveEvent(PacketReceiveEvent event) {
        if(bypass.isEnabled("Basic")) {
            if(cancelserverkeepalive.isEnabled() && event.getPacket() instanceof S00PacketKeepAlive) event.cancel();
        }
    }

    @Override
    public void onMotionEvent(MotionEvent event) {
    }

    @Override
    public void onDisable() {
        offGroundTicks = 0;
        super.onDisable();
    }
}
