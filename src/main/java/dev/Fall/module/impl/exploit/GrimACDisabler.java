package dev.Fall.module.impl.exploit;


import dev.Fall.Fall;
import dev.Fall.event.impl.network.PacketReceiveEvent;
import dev.Fall.module.Category;
import dev.Fall.module.Module;
import dev.Fall.module.settings.impl.BooleanSetting;
import dev.Fall.utils.server.PacketUtils;
import lombok.Getter;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.item.ItemFood;
import net.minecraft.item.ItemPotion;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.login.server.S01PacketEncryptionRequest;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;

import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;

public class GrimACDisabler extends Module {
    public static final BooleanSetting grimac =
            new BooleanSetting("GrimAC",true);

    public GrimACDisabler() {
        super("GrimDisabler", Category.EXPLOIT,"");
        addSettings(grimac);
    }
    private static boolean lastResult = false;

    @Getter
    private CopyOnWriteArrayList<Packet<INetHandler>> storedPackets = new CopyOnWriteArrayList<>();
    @Getter
    private ConcurrentLinkedDeque<Integer> pingPackets = new ConcurrentLinkedDeque<>();


    public boolean getGrimPost() {
        boolean result = grimac.isEnabled() && mc.thePlayer != null && mc.thePlayer.isEntityAlive() && mc.thePlayer.ticksExisted >= 10 && !(mc.currentScreen instanceof GuiDownloadTerrain);

        if(mc.thePlayer != null && mc.thePlayer.getHeldItem() != null && (mc.thePlayer.getHeldItem().getItem() instanceof ItemFood || (mc.thePlayer.getHeldItem().getItem() instanceof ItemPotion && !ItemPotion.isSplash(mc.thePlayer.getHeldItem().getMetadata())))){
            result = false;
        }

        if (lastResult && !result) {
            lastResult = false;
            mc.addScheduledTask(this::processPackets);
        }
        lastResult = result;
        return result;
    }

    public static boolean grimPostDelay(Packet<?> packet) {
        if (mc.thePlayer == null || mc.currentScreen instanceof GuiDownloadTerrain || packet instanceof S00PacketServerInfo || packet instanceof S01PacketEncryptionRequest || packet instanceof S38PacketPlayerListItem || packet instanceof S00PacketDisconnect || packet instanceof S21PacketChunkData || packet instanceof S01PacketPong || packet instanceof S44PacketWorldBorder || packet instanceof S01PacketJoinGame || packet instanceof S19PacketEntityHeadLook || packet instanceof S3EPacketTeams || packet instanceof S02PacketChat || packet instanceof S2FPacketSetSlot || packet instanceof S1CPacketEntityMetadata || packet instanceof S20PacketEntityProperties || packet instanceof S35PacketUpdateTileEntity || packet instanceof S03PacketTimeUpdate || packet instanceof S47PacketPlayerListHeaderFooter) {
            return false;
        }



        if (packet instanceof S12PacketEntityVelocity) {
            return ((S12PacketEntityVelocity) packet).getEntityID() == mc.thePlayer.getEntityId();
        } else if (packet instanceof S27PacketExplosion || packet instanceof S13PacketDestroyEntities || packet instanceof S32PacketConfirmTransaction || packet instanceof S08PacketPlayerPosLook || packet instanceof S18PacketEntityTeleport || packet instanceof S19PacketEntityStatus || packet instanceof S04PacketEntityEquipment || packet instanceof S23PacketBlockChange || packet instanceof S22PacketMultiBlockChange || packet instanceof S00PacketKeepAlive || packet instanceof S06PacketUpdateHealth || packet instanceof S14PacketEntity || packet instanceof S0FPacketSpawnMob || packet instanceof S2DPacketOpenWindow || packet instanceof S30PacketWindowItems || packet instanceof S3FPacketCustomPayload) {
            return true;
        } else {
            return packet instanceof S2EPacketCloseWindow;
        }
    }

    public void processPackets() {
        if (!storedPackets.isEmpty()) {
            for (Packet<INetHandler> packet : storedPackets) {
                PacketReceiveEvent event = new PacketReceiveEvent(packet);

                Fall.INSTANCE.getEventProtocol().handleEvent(event);

                event.cancel(); {
                    packet.processPacket(mc.getNetHandler());
                }
            }
            storedPackets.clear();
        }
    }

    public void fixC0F(C0FPacketConfirmTransaction packet) {
        int id = packet.getUid();
        if (id >= 0 || pingPackets.isEmpty()) {
            PacketUtils.sendPacketNoEvent(packet);
            return;
        }
        do {
            int current = pingPackets.getFirst();
            PacketUtils.sendPacketNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), (short) current, true));
            pingPackets.pollFirst();
            if (current == id) {
                return;
            }
        } while (!pingPackets.isEmpty());
    }
}
